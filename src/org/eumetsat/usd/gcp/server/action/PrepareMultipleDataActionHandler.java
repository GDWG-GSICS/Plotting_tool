// @formatter:off
/*
 * PROJECT: gcp 
 * AUTHOR: USC/C/PBe 
 * COPYRIGHT: EUMETSAT 2015
 */
// @formatter:on
package org.eumetsat.usd.gcp.server.action;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.eumetsat.usd.gcp.server.catalog.CatalogNavigator;
import org.eumetsat.usd.gcp.server.data.CalibrationDataManager;
import org.eumetsat.usd.gcp.server.guice.CatalogNavigatorFactory;
import org.eumetsat.usd.gcp.shared.action.PrepareMultipleData;
import org.eumetsat.usd.gcp.shared.action.PrepareMultipleDataResult;
import org.eumetsat.usd.gcp.shared.conf.PlotConfiguration;

import com.google.inject.Inject;
import com.gwtplatform.dispatch.rpc.server.ExecutionContext;
import com.gwtplatform.dispatch.rpc.server.actionhandler.ActionHandler;
import com.gwtplatform.dispatch.shared.ActionException;

/**
 * Prepare Multiple Data Action Handler. Generated by GWTP Plugin.
 * 
 * @author USD/C/PBe
 */
public class PrepareMultipleDataActionHandler implements ActionHandler<PrepareMultipleData, PrepareMultipleDataResult>
{
    /** Catalog Navigator Factory. */
    private final CatalogNavigatorFactory catalogNavigatorFactory;

    /** Calibration Data Manager. */
    private final CalibrationDataManager calibrationDataManager;

    /**
     * Constructor.
     * 
     * @param catalogNavigatorFactory
     *            factory for catalog navigator.
     * @param calibrationDataManager
     *            calibration data manager.
     */
    @Inject
    public PrepareMultipleDataActionHandler(final CatalogNavigatorFactory catalogNavigatorFactory,
            final CalibrationDataManager calibrationDataManager)
    {
        this.catalogNavigatorFactory = catalogNavigatorFactory;
        this.calibrationDataManager = calibrationDataManager;
    }

    @Override
    public final PrepareMultipleDataResult execute(final PrepareMultipleData action, final ExecutionContext context)
            throws ActionException
    {
        // Get configuration parameters.
        List<PlotConfiguration> plotConfigs = action.getPlotConfigurations();

        // If no user id defined, create new object, and do not store it at the end.
        String userID = action.getUserID();
        if (userID == null)
        {
            // Generates unique user ID.
            userID = UUID.randomUUID().toString();
        }

        // Plot every configuration.
        for (final PlotConfiguration plotConfig : plotConfigs)
        {
            // Get corresponding catalog navigator.
            CatalogNavigator catalogNavigator = catalogNavigatorFactory.create(plotConfig.getServer());

            // Get url pointing to NetCDF file.
            String datasetURL = catalogNavigator.getDatasetURL(plotConfig.getGPRC(), plotConfig.getCorrType(),
                    plotConfig.getSatInstr(), plotConfig.getRefSatInstr(), plotConfig.getMode(), plotConfig.getYear(),
                    plotConfig.getDateTime(), plotConfig.getVersion());

            // Get data from netCDF file and store it to reuse in future connections of this user.
            calibrationDataManager.addDataFromDatasetForUser(action.getUserID(), datasetURL, plotConfig.getChannel(),
                    plotConfig.getSceneTb());
        }

        // Exports current data to a CSV file with the userID in its filename.
        calibrationDataManager.exportToCSVForUser(action.getUserID());

        // Return the datasets' names for dygraph.
        return new PrepareMultipleDataResult(userID, new ArrayList<String>(calibrationDataManager.addedSourcesForUser(
                action.getUserID()).keySet()), calibrationDataManager.addedSourcesForUser(action.getUserID()));
    }

    @Override
    public final void undo(final PrepareMultipleData action, final PrepareMultipleDataResult result,
            final ExecutionContext context) throws ActionException
    {
    }

    @Override
    public final Class<PrepareMultipleData> getActionType()
    {
        return PrepareMultipleData.class;
    }

}
