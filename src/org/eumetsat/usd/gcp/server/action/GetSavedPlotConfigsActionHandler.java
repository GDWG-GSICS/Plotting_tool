package org.eumetsat.usd.gcp.server.action;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.eumetsat.usd.gcp.server.persistence.PersistenceManager;
import org.eumetsat.usd.gcp.shared.action.GetSavedPlotConfigs;
import org.eumetsat.usd.gcp.shared.action.GetSavedPlotConfigsResult;
import org.eumetsat.usd.gcp.shared.conf.PlotConfiguration;

import com.google.inject.Inject;
import com.gwtplatform.dispatch.rpc.server.ExecutionContext;
import com.gwtplatform.dispatch.rpc.server.actionhandler.ActionHandler;
import com.gwtplatform.dispatch.shared.ActionException;

/**
 * Get Saved Plot Configurations Action Handler. Generated by GWTP Plugin.
 * 
 * @author USD/C/PBe
 */
public class GetSavedPlotConfigsActionHandler implements ActionHandler<GetSavedPlotConfigs, GetSavedPlotConfigsResult>
{
    /** Persistence Manager. */
    private PersistenceManager persistenceManager;

    /**
     * Constructor.
     */
    @Inject
    public GetSavedPlotConfigsActionHandler(final PersistenceManager persistenceManager)
    {
        this.persistenceManager = persistenceManager;
    }

    @Override
    public final GetSavedPlotConfigsResult execute(final GetSavedPlotConfigs action, final ExecutionContext context)
            throws ActionException
    {
        List<PlotConfiguration> savedPlotConfigs = persistenceManager.savedPlotConfigsFor(action.getUserID());

        // Convert to HashMap of ArrayList of PlotConfiguration.
        Map<String, List<PlotConfiguration>> result = new LinkedHashMap<String, List<PlotConfiguration>>();

        for (PlotConfiguration plotConfig : savedPlotConfigs)
        {
            if (result.containsKey(plotConfig.getId()))
            {
                // update existing set of plot configs.
                result.get(plotConfig.getId()).add(plotConfig);

            } else
            {
                // create new set of plot configs.
                ArrayList<PlotConfiguration> plotConfigs = new ArrayList<PlotConfiguration>();
                plotConfigs.add(plotConfig);

                result.put(plotConfig.getId(), plotConfigs);
            }
        }

        return new GetSavedPlotConfigsResult(result);
    }

    @Override
    public final void undo(final GetSavedPlotConfigs action, final GetSavedPlotConfigsResult result,
            final ExecutionContext context) throws ActionException
    {
    }

    @Override
    public final Class<GetSavedPlotConfigs> getActionType()
    {
        return GetSavedPlotConfigs.class;
    }
}
